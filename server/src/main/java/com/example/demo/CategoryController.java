package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@CrossOrigin
@Controller // This means that this class is a Controller
@RequestMapping(path="/categories") // This means URL's start with /demo (after Application path)
public class CategoryController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CategoryRepository categoryRepository;

    @PostMapping // Map ONLY POST Requests
    public @ResponseBody CategoryModel addNewCategories (@RequestBody CategoryRequest newCategory) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        //System.out.println(newQuestion.getName());

        CategoryModel n = new CategoryModel();
        n.setCategory(newCategory.getCategory());

        CategoryModel retCat = categoryRepository.save(n);
        return retCat;
    }

    @GetMapping
    public @ResponseBody Iterable<CategoryModel> getAllCategories() {
        // This returns a JSON or XML with the users
        return categoryRepository.findAll();
    }

    @DeleteMapping(path="/{id}")
    //can do multiples here...just separate with comma (i.e. @PathVariable("id"), @RequestParam()) etc
    public @ResponseBody String deleteCategory (@PathVariable("id") Integer id) {

        // This returns a JSON or XML with the users
        categoryRepository.deleteById(id);
        return "category successfully deleted";
    }

    @DeleteMapping(path="")
    //can do multiples here...just separate with comma (i.e. @PathVariable("id"), @RequestParam()) etc
    public @ResponseBody String deleteCategories () {

        // This returns a JSON or XML with the users
        categoryRepository.deleteAll();
        return "all categories successfully deleted";
    }

}
