package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.json.*;

import java.util.List;

@CrossOrigin
@Controller // This means that this class is a Controller
@RequestMapping(path="/games") // This means URL's start with /demo (after Application path)
public class GameController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private GameRepository gameRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private QuestionRepository questionRepository;

    @Autowired
    private UserRepository userRepository;

    @PostMapping // Map ONLY POST Requests
    public @ResponseBody GameModel addNewGame (@RequestBody GameRequest gameRequest) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        GameModel n = new GameModel();
        n.setDate();
        //assign questions to game
        for (Integer id : gameRequest.getCategories()) {
            //look up categories by id and store in game

            CategoryModel c = categoryRepository.findById(id).orElseThrow(() -> new RuntimeException("Can't find category"));;
            n.setCategories(c);

            List<QuestionModel> questionList1 = questionRepository.filterQuestionsByCategory(id);
            List<QuestionModel> questionList2 = questionRepository.findByCategories_Id(id);

            n.setQuestions(questionList1);
        }

        //TODO randomize questions and limit to 10
        //will this replace first category's questions if more categories are queried?
        //need to add each element individually to object's list?
        //TODO only need 1 category
        //n.score = 0;

        UserModel u = userRepository.findById(gameRequest.getUserId()).orElseThrow(() -> new RuntimeException("Can't find user"));;
        n.setUser(u);

        GameModel retG = gameRepository.save(n);
        return retG;
    }

    //change this to find one game?
    @GetMapping
    public @ResponseBody Iterable<GameModel> getAllGames() {
        // This returns a JSON or XML with the users
        return gameRepository.findAll();
    }

    @PatchMapping(path="/{id}") // Map ONLY POST Requests
    public @ResponseBody GameModel saveGame (@RequestBody GameRequest gameRequest, @PathVariable("id") Integer id) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        List<String> guesses = gameRequest.getGuesses();
        GameModel n = gameRepository.findById(id).orElseThrow(() -> new RuntimeException("Can't find game"));
        List<QuestionModel> questions = n.getQuestions();
        Integer score = 0;
        Integer totalQuestions = guesses.size();
        for (Integer i = 0; i < totalQuestions; i++)
        {
            if (guesses.get(i).equals(questions.get(i).getAnswer()))
            {
                score++;
            }
        }

        JSONArray jsArray = new JSONArray(guesses);
        n.setGuesses(jsArray.toString());
        n.setScore(score, totalQuestions);

        GameModel retG = gameRepository.save(n);
        //gameRepository.updateScore(id, score);

        return retG;
    }

    @DeleteMapping(path="")
    //can do multiples here...just separate with comma (i.e. @PathVariable("id"), @RequestParam()) etc
    public @ResponseBody String deleteGames () {

        // This returns a JSON or XML with the users
        gameRepository.deleteAll();
        return "all games successfully deleted";
    }

}
